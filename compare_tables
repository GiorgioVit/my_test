# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np
import pandas as pd
from xlwings import Book, Range, Sheet
import xlsxwriter
import sys, os

           
pathname = os.path.dirname(sys.argv[0])        

wb = Book(pathname+ "/AnaCredit_Testing_Tools_Compare_Tables_v2.xlsm")

keys_table = wb.sheets["keys"].range("A1").expand().options(pd.DataFrame).value   

exclude_table = wb.sheets["Exclude attributes"].range("A1").expand().options(pd.DataFrame).value 



Sheet("Select").activate
sht = wb.sheets["Select"]
path_exp = sht.range("B2").value
path_out = sht.range("I2").value

n_sheets = sht.range("C9").current_region.last_cell.row

if n_sheets==9:
    sheets = [sht.range("C9").value]
    sheets_out = [sht.range("I9").value]
    exclude = [sht.range("A9").value]
    position = [sht.range("B9").value]
    position_out = [sht.range("H9").value]
else:
    sheets = sht.range("C9:C" + str(n_sheets)).value
    sheets_out = sht.range("I9:I" + str(n_sheets)).value
    exclude = sht.range("A9:A" + str(n_sheets)).value
    position = sht.range("B9:B" + str(n_sheets)).value
    position_out = sht.range("H9:H" + str(n_sheets)).value

for s in range(len(sheets)):
    # check if you want to exclude the sheet ------------------------------
    if not exclude[s] == "y":
        # create an output sheet ----------------------------------------------
        sheetname = sheets[s]
        list_of_sheets = [wb.sheets[i].name for i in range(len(wb.sheets))]
        if sheetname not in list_of_sheets:
            wb.sheets.add(name=sheetname, after=list_of_sheets[-1])
        else:
            wb.sheets[sheetname].clear()
        sht = wb.sheets[sheetname]

        # check if the current sheet is missing -------------------------------
        error_sheet = 0
        wb_exp = Book(path_exp)
        if sheetname not in [wb_exp.sheets[jj].name for jj in range(len(wb_exp.sheets))]:
            error_sheet = 1
        wb_exp.close()
        wb_out = Book(path_out)
        if sheets_out[s] not in [wb_out.sheets[jj].name for jj in range(len(wb_out.sheets))]:
            error_sheet = 1
        wb_out.close()
        
        if error_sheet == 1:
            sht.range("A1").value = "this sheet is missing!"
            sht.range("A1").color = (255, 0, 0)
            sht = wb.sheets["Select"]
            Sheet("Select").activate
            sht.range("D"+str(9+s)).value = "KO"
            sht.range("D"+str(9+s)).color = (255,0,0)
        else:  
            keys = list(keys_table.ix[sheetname].dropna())
            exclude_attributes = list(exclude_table.ix[sheetname].dropna())
            pos = position[s]
            pos =  xlsxwriter.utility.xl_cell_to_rowcol(pos)
            pos_out = position_out[s]
            pos_out =  xlsxwriter.utility.xl_cell_to_rowcol(pos_out)
            exp = pd.read_excel(io =path_exp, sheetname=sheetname, skiprows=pos[0],  engine='xlrd')
            exp = exp[np.arange(pos[1],exp.shape[1])]
            out = pd.read_excel(path_out, sheetname=sheets_out[s], skiprows=pos_out[0],  engine='xlrd')
            out = out[np.arange(pos_out[1], out.shape[1])]

            # check the keys are in columns -----------------------------------
            error_key = 0
            for ki in keys:
                if ki not in list(exp.columns) or ki not in list(out.columns):
                    error_key = 1
                    break
                
            if error_key == 1:
                sht.range("A1").value = "please provide the right keys"
                sht.range("A1").color = (255, 0, 0)
                sht = wb.sheets["Select"]
                Sheet("Select").activate
                sht.range("D"+str(9+s)).value = "KO"
                sht.range("D"+str(9+s)).color = (255,0,0)
            else:
                if len(keys)> 0:
                    exp = exp.sort_values(by = keys)
                exp = exp.fillna(value="na")
                exp = exp.reset_index(drop =True)
                
                out = out.sort_values(by = keys)
                out = out.fillna(value="na")
                out = out.reset_index(drop =True)
                
                # check if the columns are the same and in the same order
                col_bool = list(exp.columns) == list(out.columns)
                
                # check if there are missing records
                n_miss_records = 0
                nrows_exp = exp.shape[0]
                nrows_out = out.shape[0]
    
                exp["missing_record"] = [0]*nrows_exp
                out["missing_record"] = [0]*nrows_out
                keys_m = [x for x in keys if x != 'ACQ_ASSGND_MSG_ID']
                all_keys_exp = [list(exp[keys_m].ix[ii]) for ii in range(exp.shape[0])]
                all_keys_out = [list(out[keys_m].ix[ii]) for ii in range(out.shape[0])]
                
# 
#                   # check missing records (exception for ACQ_ASSGND_MSG_ID)
                
                for i in range(nrows_exp):
                    if list(exp[keys_m].ix[i]) not in all_keys_out:
                        exp["missing_record"].ix[i] = 1
                        n_miss_records = n_miss_records +1
                for i in range(nrows_out):
                    if list(out[keys_m].ix[i]) not in all_keys_exp:
                        out["missing_record"].ix[i] = 1
                        n_miss_records = n_miss_records +1

    
            
                
                # prepare the format of output results ------------------------  
                Sheet(sheetname).activate
                sht.range("A1").value = "Error :"
                sht.range("A1").color = (255,0,0) 
                sht.range("A2").value = "Missing Records : "
                sht.range("A2").color = (255,255,0) 
                sht.range("B1").color = (255,0,0)
                sht.range("B2").value = n_miss_records
                sht.range("B2").color = (255,255,0)           
                
                # copy paste the sorted tables --------------------------------
                start_row = 5 
                sht.range("A" + str(start_row) + ":"+  xlsxwriter.utility.xl_col_to_name(exp.shape[1]) + \
                          str(start_row + nrows_exp)).value = exp
                sht.range(xlsxwriter.utility.xl_col_to_name(exp.shape[1]+2) + str(start_row) + \
                          ":"+ xlsxwriter.utility.xl_col_to_name(exp.shape[1]+1+out.shape[1]) + \
                            str(start_row + nrows_exp)).value = out          
            
                #check cells value --------------------------------------------

                if col_bool == True:
                    count_err = 0
                    confronta = 1
                    i = 0
                    j = 0
                    z = 0                       
                    while i < nrows_exp and j < nrows_out:
                        if exp["missing_record"].ix[i]==1:
                            confronta = 0 
                            sht.range("A" + str(start_row + 1 + i) + ":" +\
                                      xlsxwriter.utility.xl_col_to_name(exp.shape[1])+ str(start_row + 1 + i)).color = (255, 255, 0)
                            i = i + 1
                        if out["missing_record"].ix[j]==1:       
                            confronta = 0 
                            sht.range(xlsxwriter.utility.xl_col_to_name(exp.shape[1]+2)+ str(start_row + 1 + j) + ":" +\
                                      xlsxwriter.utility.xl_col_to_name(exp.shape[1]+2+out.shape[1])+ str(start_row + 1 + j)).color = (255, 255, 0)
                            j = j + 1
                        if confronta == 1:
                            for v in range(exp.shape[1]):
                                if str(out.ix[j][v]) == "nan" and str(exp.ix[i][v]) == "nan":
                                    z = z + 1
                                else:
                                    if out.ix[j][v] != exp.ix[i][v] and out.columns[v] not in exclude_attributes:
    
                                        count_err = count_err + 1  
                                        sht.range(xlsxwriter.utility.xl_col_to_name(v + exp.shape[1] +3) + str(start_row + 1 + j)).color = (255, 0, 0)
                                        sht.range(xlsxwriter.utility.xl_col_to_name(v+1)+ str(start_row + 1 + i) ).color = (255, 0, 0)
                            i = i + 1 
                            j = j + 1
                        confronta = 1  
                    if i < nrows_exp:
                         while i < nrows_exp:
                             if exp["missing_record"].ix[i]==1:
                                sht.range("A" + str(start_row + 1 + i) + ":" +\
                                          xlsxwriter.utility.xl_col_to_name(exp.shape[1])+ str(start_row + 1 + i)).color = (255, 255, 0)
                             i = i + 1 
                    if j < nrows_out:
                        while j < nrows_out:
                            if out["missing_record"].ix[j]==1:
                                sht.range(xlsxwriter.utility.xl_col_to_name(exp.shape[1]+2)+ str(start_row + 1 + j) + ":" +\
                                          xlsxwriter.utility.xl_col_to_name(exp.shape[1]+2+out.shape[1])+ str(start_row + 1 + j)).color = (255, 255, 0)
                            j = j + 1                    
      
                    sht.range("B1").value = count_err
                    if count_err == 0:
                        sht.range("A1").color = (0,255,0)
                        sht.range("B1").color = (0,255,0) 
                    
                    sht = wb.sheets["Select"]
                    Sheet("Select").activate
                    if n_miss_records == 0 and  count_err == 0:
                        sht.range("D"+str(9+s)).value = "OK"
                        sht.range("D"+str(9+s)).color = (0,255,0)
                    else:
                        sht.range("D"+str(9+s)).value = "KO"
                        sht.range("D"+str(9+s)).color = (255,0,0)
                else:
                    sht.range("A1").value = "the name or order of some columns is not correct"
                    sht.range("A1").color = (255, 0, 0)
                    sht = wb.sheets["Select"]
                    Sheet("Select").activate
                    sht.range("D"+str(9+s)).value = "KO"
                    sht.range("D"+str(9+s)).color = (255,0,0)                        
                    

    wb.save()

